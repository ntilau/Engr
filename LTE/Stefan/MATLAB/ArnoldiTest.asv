close all;
clear all:

set(0,'DefaultFigureWindowStyle','docked');
pathName = 'C:\work\examples\stuff\rect1\rect1_1\';

dirVec = vectorReader(strcat(pathName, 'D'));
global S;
S = MatrixMarketReader(strcat(pathName, 'mat_0'));
global T;
T = MatrixMarketReader(strcat(pathName, 'mat_1'));
global oMult;
oMult = MatrixMarketReader(strcat(pathName, 'orthoMat_0'));
global oInv;
oInv = MatrixMarketReader(strcat(pathName, 'orthoMat_1'));

% kill Dirichlet
dirPos = find(dirVec);
S(dirPos, :) = [];
S(:, dirPos) = [];
T(dirPos, :) = [];
T(:, dirPos) = [];
oMult(dirPos, :) = [];
oMult(:, dirPos) = [];
oInv(dirPos, :) = [];
S(:, dirPos) = [];


Sf = full(S);
Tf = full(T);
[V D] = eig(Sf, Tf);

for k = 1:size(D, 1)
  e(k) = sqrt(D(k, k));
end

e

global sigma;
sigma = -6.8332296057685333e+000;
k = 20;


% global S, T;          % make matrices available in function handle

[m, n] = size(S); 
opts.isreal = false;
[vec, val] = eigs(@eigs_handle,n,k,sigma, opts); % calculate eigenvalues

for k = 1:size(val, 1)
  e2(k) = sqrt(val(k, k));
end
    
e2


x_vor = vectorReader(strcat(pathName, 'x_vor')); 
xMult = vectorReader(strcat(pathName, 'xMult')); 
xInv = vectorReader(strcat(pathName, 'xInv')); 
x_nach = vectorReader(strcat(pathName, 'x_nach')); 
x_nachTest = eigs_handle(x_vor);
relError = abs(x_nach - x_nachTest) ./ abs(x_nach)



sTest = MatrixMarketReader(strcat(pathName, 'matA'));
S - sTest
tTest = MatrixMarketReader(strcat(pathName, 'matM'));
T - tTest
sTest = MatrixMarketReader(strcat(pathName, 'matAdummyCopy'));
S - sTest
tTest = MatrixMarketReader(strcat(pathName, 'matMdummyCopy'));
T - tTest
shiftMat = MatrixMarketReader(strcat(pathName, 'shiftMat'));
shiftMat - (S - sigma * T)





