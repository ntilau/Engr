#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "mex.h"
/* PARDISO prototype. */
#if defined(_WIN32) || defined(_WIN64)
#define pardiso_ PARDISO
#else
#define PARDISO pardiso_
#endif
#if defined(MKL_ILP64)
#define MKL_INT long long
#else
#define MKL_INT int
#endif
#define DEBUG 0

void buildSymmetricCSR_Structure(double* A_values_sym, int* A_ja_sym, int* A_ia_sym, )
{
 
  
  /* build symmetric structure */
//   A_values_sym = (double *) mxCalloc(nnz_sym, sizeof (double));
//   A_ja_sym = (int *) mxCalloc(nnz_sym, sizeof (int));
//   A_ia_sym = (int *) mxCalloc(n_row, sizeof (int));
  A_values_sym = (double *) calloc(nnz_sym, sizeof (double));
  A_ja_sym = (int *) calloc(nnz_sym, sizeof (int));
  A_ia_sym = (int *) calloc(n_row, sizeof (int));
  /* build symmetric CSR structure */  
  k = 0;
  A_ia_sym[0] = 1;
  for (i = 0 ; i < n_col ; i++) {
    kk = 0;
    for (j = A_ia[i] ; j < A_ia[i+1] ; j++) {
    /* upper part */
      if (A_ja[j] >= i) {
        A_ja_sym[k] = A_ja[j]+1;
        A_values_sym [k] = A_valuesR[j];
        k +=1;
        kk +=1;
      }
    }
    A_ia_sym[i+1] =  A_ia_sym[i] + kk;
  }
  #if DEBUG
  for (i = 0 ; i < n_col ; i++)
    for (j = A_ia_sym[i]-1 ; j < A_ia_sym[i+1]-1 ; j++)
      printf(" sym i=%d ja=%d  A.real=%e \n", i+1,  A_ja_sym[j], A_values_sym[j]);
  #endif
  
  mtype = -2;
  
  phase = 22;
  
  PARDISO(pt, &maxfct, &mnum, &mtype, &phase,
  &n_col, A_values_sym, A_ia_sym, A_ja_sym, perm, &nrhs,
  iparm, &msglvl, NULL, NULL, &error);
  
  if ((iparm[15]+iparm[16]) > iparm[14])
    printf(">>> PARDISO >>> Total PARDISO Memory consumption is %d KBytes\n", iparm[15]+iparm[16]);
  else
    printf(">>> PARDISO >>> Total PARDISO Memory consumption is %d KBytes\n", iparm[14] );
  printf(">>> PARDISO >>> Postive Eigenvalues of matrix A:  %d\n", iparm[21]);
  printf(">>> PARDISO >>> Negative Eigenvalues of matrix A:  %d\n", n_col - iparm[21]);
  
  for (i = 0 ; i < 64 ; i++)
    iparmD[i] = (int) iparm [i];
  
  if (A_values_sym!= NULL) {
//     mxFree (A_values_sym);
    free(A_values_sym);
    A_values_sym = NULL;
  }
  if (A_ia_sym!= NULL) {
//     mxFree (A_ia_sym);
    free(A_ia_sym);
    A_ia_sym = NULL;
  }
  if (A_ja_sym!= NULL) {
//     mxFree (A_ja_sym);
    free(A_ja_sym);
    A_ja_sym = NULL;
  }

  }  
//   mxFree(iparm);
  free(iparm);
}

