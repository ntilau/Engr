%% main
clear;
close all;
% clc;
addpath(genpath('C:\work\Matlab\Projects\Vigoni\'));
set(0,'DefaultFigureWindowStyle','docked');

% set constants
global c0 mu0 eps0 Z0
c0   = 0.2998e9;   %[m/s]
mu0  = pi*4e-7;    %[A/s]
eps0 = 1 / (mu0 * c0^2);
Z0  =   c0*mu0;     %[ohm]

ROOTPATH = 'C:\work\examples\Vigoni\DDM_Saar\';

% empty waveguide
% mesh.fine   = [ROOTPATH 'GEO/empty_very_fine.fem'];
% dpostWR90 coarse mesh
% mesh.fine   = [ROOTPATJ 'GEO/dpostWR90_cmeshS.fem'];
% dpostWR90
% mesh.fine   = [ROOTPATH 'GEO/dpostWR90_finemesh_old.fem'];
% dpostWR90 with ports more far away and very fine mesh 
% mesh.fine   = [ROOTPATH 'GEO/dpostWR90_finemesh.fem'];
% iris with fine mesh
% mesh.fine   = [ROOTPATH 'GEO/iris_fine.fem'];
% waveguide with post
% mesh.fine   = [ROOTPATH 'GEO/postWG.fem'];
% waveguide with block
% mesh.fine   = [ROOTPATH 'GEO/blockWG.fem'];
% waveguide with layer
% mesh.fine   = [ROOTPATH 'GEO/layer.fem'];
% short waveguide with layer
mesh.fine   = [ROOTPATH 'GEO/layerShort2_fff.fem'];
% mesh.fine   = [ROOTPATH 'GEO/layerShort2_f.fem'];
% empty waveguide with two dielectric posts
% mesh.fine   = [ROOTPATH 'GEO/TwoPosts_finemesh.fem'];
% mesh.fine   = [ROOTPATH 'GEO/TwoPosts_finestmesh.fem'];
% empty waveguide with four dielectric posts
% mesh.fine   = [ROOTPATH 'GEO/FourPosts_finemesh.fem'];
% mesh.fine   = [ROOTPATH 'GEO/FourPosts_finermesh.fem'];
% mesh.fine   = [ROOTPATH 'GEO/FourPosts_ff_mesh.fem'];
% empty waveguide with two dielectric slabs
% mesh.fine   = [ROOTPATH 'GEO/TwoSlab_fine.fem'];

% empty waveguide and waveguide with layer
% mesh.dd     = [ROOTPATH 'GEO/empty_dd.fem'];
% dpostWR90
% mesh.dd     = [ROOTPATH 'GEO/dpostWR90_cmeshS.fem'];
% dpostWR90 with ports more far away
% mesh.dd     = [ROOTPATH 'GEO/dpostWR90_cmeshDoms.fem'];
% iris
% mesh.dd     = [ROOTPATH 'GEO/iris_dd.fem'];
% waveguide with post
% mesh.dd     = [ROOTPATH 'GEO/postWGdd.fem'];
% short waveguide with layer
mesh.dd   = [ROOTPATH 'GEO/layerShortdd.fem'];
% % empty waveguide with two dielectric posts
% mesh.dd   = [ROOTPATH 'GEO/TwoPosts_coarsemesh.fem'];
% empty waveguide with four dielectric posts
% mesh.dd   = [ROOTPATH 'GEO/FourPosts_coarsemesh.fem'];
% empty waveguide with two dielectric slabs
% mesh.dd   = [ROOTPATH 'GEO/TwoSlab_dd.fem'];

mesh.out    = [ROOTPATH 'GEO/empty.out'];
mesh.Np     = 2;
mesh.a      = [22.86, 22.86];%[22.86 22.86];%[18.35,  18.35];%%[18.35,  18.35];
mesh.b      = [10.16 10.16];%[9.55,   9.56];
mesh.plab   = [11, 12];
mesh.PEClab = 1;
mesh.PMClab = 0;
mesh.nmode  = 1;
mesh.plane  = 'H';
mesh.ndie   = 3;%2;
mesh.Eps    = [1.0];
mesh.Mu     = [1.0];
mesh.mlab   = [1, 2, 3];

interpolationPnts.frequency.start = 7;  % in GHz
interpolationPnts.frequency.stop  = 13; % in GHz
interpolationPnts.frequency.N     = 3;

interpolationPnts.epsilon{1}.materials = 1;
interpolationPnts.epsilon{1}.start(1)  = 1;%4
interpolationPnts.epsilon{1}.stop(1)   = 7;%6;
interpolationPnts.epsilon{1}.N(1)      = 4;%11;
interpolationPnts.epsilon{1}.mlabel(1) = 2;
interpolationPnts.epsilon{1}.domain    = -1;

interpolationPnts.mu{1}.materials = 1;
interpolationPnts.mu{1}.start(1)  = 1;%4
interpolationPnts.mu{1}.stop(1)   = 7;%6;
interpolationPnts.mu{1}.N(1)      = 4;%11;
interpolationPnts.mu{1}.mlabel(1) = 2;
interpolationPnts.mu{1}.domain    = -1;

flagout = 1;

[unredModel, solVecs, results, sweep, nmode, xy, PO, Np, MESH] = ehdevDDforMOR_saarFreqEpsMu(mesh, interpolationPnts, flagout);


% plot S parameters
results.param{1}.Name = 'frequency';
results.param{1}.Vals = sweep.frequency.freq;
results.param{2}.Name = 'epsilon relative';
results.param{2}.Vals = sweep.epsilon{1}.epsRel;
results.param{3}.Name = 'mu relative';
results.param{3}.Vals = 1 ./ sweep.mu{1}.nuRel;


% results.param{1}.Name = 'epsilon relative';
% results.param{1}.Vals = sweep.epsilon{1}.epsRel;
% results.param{2}.Name = 'mu';
% results.param{2}.Vals = 1 ./ sweep.mu{1}.nuRel;

sId = [1 1];
F = plotResults(results, sId, 1);


%% build ROM
t1 = cputime;
tic;
ROM = buildROM_MultipleEpsilon(unredModel, solVecs);
toc;
t2 = cputime;
totalTimeBuildROM = t2 - t1;
display(totalTimeBuildROM);

% load(strcat(ROOTPATH, 'results\data'));


%% solve ROM
sweep.frequency.start = 7e9;
sweep.frequency.stop  = 13e9;
sweep.frequency.N     = 301;

sweep.epsilon{1}.materials = 1;
sweep.epsilon{1}.start(1)  = 1;%4
sweep.epsilon{1}.stop(1)   = 7;%6;
sweep.epsilon{1}.N(1)      = 301;%11;
sweep.epsilon{1}.mlabel(1) = 2;
sweep.epsilon{1}.domain    = -1;

% sweep.epsilon{2}.materials = 1;
% sweep.epsilon{2}.start(1)  = 1;%4
% sweep.epsilon{2}.stop(1)   = 11;%6;
% sweep.epsilon{2}.N(1)      = 1;%11;
% sweep.epsilon{2}.mlabel(1) = 3;
% sweep.epsilon{2}.domain    = -1;

sweep.mu{1}.materials = 1;
sweep.mu{1}.start(1)  = 6;%4
sweep.mu{1}.stop(1)   = 9;%6;
sweep.mu{1}.N(1)      = 1;%11;
sweep.mu{1}.mlabel(1) = 2;
sweep.mu{1}.domain    = -1;

nfreq = sweep.frequency.N;                                %numero di punti in frequenza da calcolare
sweep.frequency.freq = [sweep.frequency.start];    %estremi delle frequenze
if nfreq > 1
    sweep.frequency.freq = [sweep.frequency.start:(sweep.frequency.stop-sweep.frequency.start)/(nfreq-1):sweep.frequency.stop]; 
end  

for epsCnt = 1 : length(sweep.epsilon)
  sweep.epsilon{epsCnt}.epsRel = sweep.epsilon{epsCnt}.start;
  if sweep.epsilon{epsCnt}.N > 1
    sweep.epsilon{epsCnt}.epsRel = [sweep.epsilon{epsCnt}.start : (sweep.epsilon{epsCnt}.stop - ...
      sweep.epsilon{epsCnt}.start)./(sweep.epsilon{epsCnt}.N-1) : sweep.epsilon{epsCnt}.stop];
    % add some losses
    sweep.epsilon{epsCnt}.epsRel = sweep.epsilon{epsCnt}.epsRel - j * 0.01;
  end
end

sweep.mu{1}.muRel = sweep.mu{1}.start;
if sweep.mu{1}.N > 1
    sweep.mu{1}.muRel = [sweep.mu{1}.start : (sweep.mu{1}.stop - sweep.mu{1}.start)...
      ./(sweep.mu{1}.N-1) : sweep.mu{1}.stop];
end


tic;
% t1 = cputime;
results = solveModelFreqEpsMu(ROM, sweep, nmode, xy, PO, Np);
% t2 = cputime;
% totalTimeEvaluateROM = t2 - t1;
% display(totalTimeEvaluateROM);
toc;

% field visualization
% solUncompressed = unredModel.tfMat * (ROM.U * results.sol);
% fieldSolution = j*solUncompressed(:, 1);
% % figure;
% % scatter(xy(1, :), xy(2, :), 5, real(fieldSolution.'));
% % % endPhase = 1 ;
% % % for phaseCnt = 1:endPhase
% % %   fieldSolution = fieldSolution * exp(j * 2 * pi / endPhase) ;
% % %   scatter(xy(1, :), xy(2, :), 5, real(fieldSolution.'));
% % %   caxis([-10 10]);
% % %   FF(phaseCnt) = getframe ;
% % % end
% % % movie(FF, 3) ;
% % % writecres('fieldMap.out', fieldSolution, length(fieldSolution), 1, 'R');
% 
% solVec = real(fieldSolution) ;
% [f1AxesHandle, f2AxesHandle] = plotSolution(xy, solVec, MESH);

% cmap = colormap;
% % mav = max (abs(fieldSolution));
% % miv = min (abs(fieldSolution));
% mav = max(real(fieldSolution));
% miv = min(real(fieldSolution));
% 
% for i = 1:length(fieldSolution)
% %     rcolor(i,:) = cmap(ceil(64*(abs(fieldSolution(i))-miv+1)/(mav-miv+1)),:);
%     rcolor(i,:) = cmap(ceil(64*(real(fieldSolution(i))-miv+1)/(mav-miv+1)),:);
% end
% 
% figure;
% 
% for domCnt = 1:length(MESH)
%   for eleCnt = 1:size(MESH{domCnt}.ele, 2)
%     cd(1,1,:) = rcolor(MESH{domCnt}.ele(2,eleCnt),:);
%     cd(1,2,:) = rcolor(MESH{domCnt}.ele(3,eleCnt),:);
%     cd(1,3,:) = rcolor(MESH{domCnt}.ele(4,eleCnt),:);
%     patch('XData',[xy(1,MESH{domCnt}.ele(2,eleCnt)), xy(1,MESH{domCnt}.ele(3,eleCnt)), xy(1,MESH{domCnt}.ele(4,eleCnt))]',...
%         'YData',[xy(2,MESH{domCnt}.ele(2,eleCnt)), xy(2,MESH{domCnt}.ele(3,eleCnt)), xy(2,MESH{domCnt}.ele(4,eleCnt))]',...
%         'CData',cd,'FaceColor','interp','EdgeColor','interp');
%     %caxis(caxis) freeze ;
% %     caxis([miv mav]);
%   end
% end


% % 
% % % plot s11 parameters
% % nfreq = sweep.frequency.N;
% % freq = sweep.frequency.freq;
% % figure;
% % for freqCnt = 1:nfreq
% %     for epsCnt = 1:sweep.epsilon.N
% %         stmpROM(freqCnt, epsCnt) = results.sMat{freqCnt, epsCnt}(1,1);
% %     end
% %     plot(sweep.epsilon.epsRel, abs(stmpROM(freqCnt, :)));
% %     xlabel('epsilon relative');
% %     ylabel('|S11|');
% %     hold all;
% % end

% plot S parameters
results.param{1}.Name = 'frequency';
results.param{1}.Vals = sweep.frequency.freq;
results.param{2}.Name = 'epsilon relative';
results.param{2}.Vals = sweep.epsilon{1}.epsRel;
results.param{3}.Name = 'mu relative';
results.param{3}.Vals = sweep.mu{1}.muRel;

% results.param{1}.Name = 'epsilon relative';
% results.param{1}.Vals = sweep.epsilon{1}.epsRel;
% results.param{2}.Name = 'mu relative';
% results.param{2}.Vals = sweep.mu{1}.muRel;

% results.param{1}.Name = 'frequency';
% results.param{1}.Vals = sweep.frequency.freq;
% results.param{2}.Name = 'epsilon relative';
% results.param{2}.Vals = sweep.epsilon{1}.epsRel;

% results.param{1}.Name = 'frequency';
% results.param{1}.Vals = sweep.frequency.freq;

% results.param{1}.Name = 'epsilon relative 1';
% results.param{1}.Vals = sweep.epsilon{1}.epsRel;

sId = [1 1];
% F = plotResults2(results, sId, 1); % plot results for eps1=eps2.
F = plotResults(results, sId, 1);

% % figure;
% % surf(sweep.epsilon.epsRel, freq / 1e9, abs(stmpROM));
% % xlabel('epsilon relative');
% % ylabel('frequency (GHz)');
% % zlabel('|S11|');


%% solve unredModel

tic;
% results = solveModelMultipleEpsilon(unredModel, sweep, nmode, xy, PO, Np, mesh.Mu);
results = solveModelFreqEpsMu(unredModel, sweep, nmode, xy, PO, Np);
toc;
% 
% % plot S parameters
% results.param{1}.Name = 'frequency';
% results.param{1}.Vals = sweep.frequency.freq;
% results.param{2}.Name = 'epsilon relative 1';
% results.param{2}.Vals = sweep.epsilon{1}.epsRel;
% results.param{3}.Name = 'epsilon relative 2';
% results.param{3}.Vals = sweep.epsilon{2}.epsRel;
% 
% % results.param{1}.Name = 'epsilon relative 1';
% % results.param{1}.Vals = sweep.epsilon{1}.epsRel;
% % results.param{2}.Name = 'epsilon relative 2';
% % results.param{2}.Vals = sweep.epsilon{2}.epsRel;
% 
% sId = [1 1];
% plotResults(results, sId, 0);


%% analytical solution

d1 = 10;
d2 = 7;
a = 22.86;
b = 10.16;

% for fCnt = 1 : sweep.frequency.N
%   for epsCnt = 1 : sweep.epsilon{1}.N(1)
%     for muCnt = 1 : sweep.mu{1}.N(1)
%       s11analytic{fCnt, epsCnt, muCnt} = analytic(a, b, d1, d2, sweep.epsilon{1}.epsRel(epsCnt), ...
%         1 / sweep.mu{1}.muRel(muCnt), sweep.frequency.freq(fCnt));
%     end
%   end
% end

% for epsCnt = 1 : sweep.epsilon{1}.N(1)
%   for muCnt = 1 : sweep.mu{1}.N(1)
%     s11analytic(epsCnt, muCnt) = analytic(a, b, d1, d2, sweep.epsilon{1}.epsRel(epsCnt), ...
%       sweep.mu{1}.muRel(muCnt), sweep.frequency.freq(1) * 1e-9);
%   end
% end
% for fCnt = 1 : sweep.frequency.N
%   for muCnt = 1 : sweep.mu{1}.N(1)
%     s11analytic(fCnt, muCnt) = analytic(a, b, d1, d2, sweep.epsilon{1}.epsRel(1), ...
%       sweep.mu{1}.muRel(muCnt), sweep.frequency.freq(fCnt) * 1e-9);
%   end
% end
for fCnt = 1 : sweep.frequency.N
  for epsCnt = 1 : sweep.epsilon{1}.N(1)
    s11analytic(fCnt, epsCnt) = analytic(a, b, d1, d2, sweep.epsilon{1}.epsRel(epsCnt), ...
      sweep.mu{1}.muRel(1), sweep.frequency.freq(fCnt) * 1e-9);
  end
end
figure;
surf(20 * log10(abs(s11analytic)).');

%get numerically computed scattering paramters from results
% initialize
myDim = 0;
kk = 1;
paramId = [];
% F = [];

% get parameter dimension
for ii = 1:length(results.param)
    myDim = myDim + (length(results.param{ii}.Vals) ~= 1);
    if (length(results.param{ii}.Vals) ~= 1)
        paramId(kk) = ii;
        kk = kk + 1;
    end
end
% initialize
dimP1 = length(results.param{paramId(1)}.Vals);
dimP2 = length(results.param{paramId(2)}.Vals);
sVal = zeros(dimP2, dimP1);
onlyOneParamPoint = setdiff(1 : 3, paramId);
% get results
switch onlyOneParamPoint
  case 1
    for p1Cnt = 1:dimP1
      for p2Cnt = 1:dimP2
        %             linId = (p2Cnt - 1) * dimP1 + p1Cnt;
        %             sVal(p1Cnt, p2Cnt) = results.sMat{linId}(sId(1), sId(2));
        sVal(p2Cnt, p1Cnt) = results.sMat{1, p1Cnt, p2Cnt}(sId(1), sId(2));
      end
    end
  case 2
    for p1Cnt = 1:dimP1
      for p2Cnt = 1:dimP2
        sVal(p2Cnt, p1Cnt) = results.sMat{p1Cnt, 1, p2Cnt}(sId(1), sId(2));
      end
    end
  case 3
    for p1Cnt = 1:dimP1
      for p2Cnt = 1:dimP2
        sVal(p2Cnt, p1Cnt) = results.sMat{p1Cnt, p2Cnt, 1}(sId(1), sId(2));
      end
    end
end
%plot
figure;
F = surf(real(results.param{paramId(1)}.Vals), real(results.param{paramId(2)}.Vals), abs(sVal - s11analytic.'));
%     contour(real(results.param{paramId(2)}.Vals), real(results.param{paramId(1)}.Vals), abs(sVal));
xlabel(results.param{paramId(1)}.Name);
ylabel(results.param{paramId(2)}.Name);
zlabel(sprintf('|S_{%i %i}|', sId(1), sId(2)));


%% pcolor plot
fontsize = 20;
figHandle = figure;
set(figHandle,'color','w');
ff = pcolor(real(results.param{paramId(1)}.Vals) * 1e-9, real(results.param{paramId(2)}.Vals), ...
  20*log10(abs(sVal)));
set(ff, 'EdgeColor', 'none', 'FaceColor', 'interp');
colormap('Gray');
colorbar;
xlabel('Frequency (GHz)', 'FontSize', fontsize);
ylabel('\epsilon_r', 'FontSize', fontsize);
set(gca,'FontSize',fontsize);

figHandle = figure;
set(figHandle,'color','w');
ff = pcolor(real(results.param{paramId(1)}.Vals) * 1e-9, real(results.param{paramId(2)}.Vals), abs(sVal - s11analytic.'));
% ff = contour(real(results.param{paramId(1)}.Vals) * 1e-9, real(results.param{paramId(2)}.Vals), abs(sVal - s11analytic.'));
set(ff, 'EdgeColor', 'none', 'FaceColor', 'interp');
colormap('Gray');
colorbar;
xlabel('Frequency (GHz)', 'FontSize', fontsize);
ylabel('\epsilon_r', 'FontSize', fontsize);
set(gca,'FontSize',fontsize);
brighten(0.5);

save C:\work\examples\Vigoni\DDM_Saar\results\freqEpsMu_6.mat results sVal s11analytic paramId

% load('C:\work\examples\Vigoni\DDM_Saar\results\freqEpsMu1.mat');
