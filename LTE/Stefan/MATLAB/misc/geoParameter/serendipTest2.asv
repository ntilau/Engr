close all;
clear all;

tic;

linewidth = 2.5;
fontsize = 14;

set(0,'DefaultFigureWindowStyle','docked');

%% reconstruct parameter dependence

% parameter intervals
s1Start = -10;
s1End   =  10;
s2Start = -10;
s2End   =  10;

% interpolation points in reference quadrilateral
intpPntsRef = zeros(32, 2);
delta = 1 / 6;
intpPntsRef(1, :)  = [0 0];
intpPntsRef(2, :)  = [delta 0];
intpPntsRef(3, :)  = [(2 * delta) 0];
intpPntsRef(4, :)  = [(3 * delta) 0];
intpPntsRef(5, :)  = [(4 * delta) 0];
intpPntsRef(6, :)  = [(5 * delta) 0];
intpPntsRef(7, :)  = [(6 * delta) 0];
intpPntsRef(8, :)  = [0 delta];
intpPntsRef(9, :)  = [delta delta];
intpPntsRef(10, :) = [(3 * delta) delta];
intpPntsRef(11, :) = [(5 * delta) delta];
intpPntsRef(12, :) = [(6 * delta) delta];
intpPntsRef(13, :) = [0 (2 * delta)];
intpPntsRef(14, :) = [(6 * delta) (2 * delta)];
intpPntsRef(15, :) = [0 (3 * delta)];
intpPntsRef(16, :) = [delta (3 * delta)];
intpPntsRef(17, :) = [(5 * delta) (3 * delta)];
intpPntsRef(18, :) = [(6 * delta) (3 * delta)];
intpPntsRef(19, :) = [0 (4 * delta)];
intpPntsRef(20, :) = [(6 * delta) (4 * delta)];
intpPntsRef(21, :) = [0 (5 * delta)];
intpPntsRef(22, :) = [delta (5 * delta)];
intpPntsRef(23, :) = [(3 * delta) (5 * delta)];
intpPntsRef(24, :) = [(5 * delta) (5 * delta)];
intpPntsRef(25, :) = [(6 * delta) (5 * delta)];
intpPntsRef(26, :) = [0 (6 * delta)];
intpPntsRef(27, :) = [delta (6 * delta)];
intpPntsRef(28, :) = [(2 * delta) (6 * delta)];
intpPntsRef(29, :) = [(3 * delta) (6 * delta)];
intpPntsRef(30, :) = [(4 * delta) (6 * delta)];
intpPntsRef(31, :) = [(5 * delta) (6 * delta)];
intpPntsRef(32, :) = [(6 * delta) (6 * delta)];
% figure;
% plot(intpPntsRef(:, 1), intpPntsRef(:, 2), 'x');
% grid;

% compute interpolation points
% take arbitrary interval into accout, not only [0,1]
intpPnts = zeros(32, 2);
intpPnts(:, 1) = s1Start * (1 - intpPntsRef(:, 1)) + ...
  s1End *  intpPntsRef(:, 1);
intpPnts(:, 2) = s2Start * (1 - intpPntsRef(:, 2)) + ...
  s2End *  intpPntsRef(:, 2);
% figure;
% plot(intpPnts(:, 1), intpPnts(:, 2), 'x');
% grid;

finalPoly = [];
maxOrder = 8;
numParams = 2;
for k = 0:maxOrder
  finalPoly = rec(numParams, k, finalPoly, 0, 1);
end
coeffPoly = zeros(size(finalPoly, 1), 1);

% two-dimensional interpolation
% build two-dimensional Vandermonde matrix
V = zeros(size(intpPnts, 1));
for pntCnt = 1:size(intpPnts, 1)
  for powCnt = 1:size(intpPnts, 1)
    V(pntCnt, powCnt) = intpPnts(pntCnt, 1)^finalPoly(powCnt, 1) * ...
      intpPnts(pntCnt, 2)^finalPoly(powCnt, 2);
  end
end
b = zeros(size(intpPnts, 1), 1);
b(1) = 1;

[Q R] = qr(V);
c = R \ (Q' * b);
% c = V \ b;

xTest = 0:0.01:1;
yTest = 0:0.01:1;
fTest = zeros(length(xTest), length(yTest));

for s1Cnt = 1:length(xTest)
  for s2Cnt = 1:length(yTest)
    sAct = [xTest(s1Cnt) yTest(s2Cnt)];
    for rowCnt = 1:length(c)
      pow = 1;
      for parCnt = 1:size(finalPoly, 2)
        pow = pow * sAct(parCnt)^finalPoly(rowCnt, parCnt);
      end
      fTest(s1Cnt, s2Cnt) = fTest(s1Cnt, s2Cnt) + c(rowCnt) * pow;
    end
  end
end

figHandle = figure;
surf(xTest, yTest, fTest);


fTestIntPnts = zeros(size(intpPnts, 1), 1);
for pntCnt = 1:length(fTestIntPnts)
  sAct = [intpPnts(pntCnt, 1) intpPnts(pntCnt, 2)];
  for rowCnt = 1:length(c)
    pow = 1;
    for parCnt = 1:size(finalPoly, 2)
      pow = pow * sAct(parCnt)^finalPoly(rowCnt, parCnt);
    end
    fTestIntPnts(pntCnt) = fTestIntPnts(pntCnt) + c(rowCnt) * pow;
  end
end
display(fTestIntPnts);
