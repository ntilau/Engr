function fNameSpara = modelEvaluationSqrtK(modelName, impedanceFlag, newEndingFlag)


c0 = 299792.458e3;

%% load model
tic
disp(' ');
disp('Loading model...');

if newEndingFlag
  fName = strcat(modelName, 'sysMatParamDependence.txt');
else
  fName = strcat(modelName, 'sysMatRedNames');
end
paramDependenceSysMat = readParamDependence(fName);

% read reduced system matrices
[r c] = size(paramDependenceSysMat);
sys = cell(r, 1);
for k = 1 : r
  fName = strcat(modelName, strcat('sysMatRed_', num2str(paramDependenceSysMat(k, 1))));
  for m = 2 : c
    fName = strcat(fName, '_', num2str(paramDependenceSysMat(k, m)));
  end
  if newEndingFlag
    sys{k} = readMatFull([fName '.fmat']);
  else
    sys{k} = readMatFull(fName);
  end
end

% read "modelParam.txt"
fNameModRedTxt = strcat(modelName, 'modelParam.txt');
[fExp, paramNames, paramValInExp, numLeftVecs] = readModParaTxt(fNameModRedTxt);

leftVecs = zeros(numLeftVecs, size(sys{1}, 1));
rhs = cell(numLeftVecs, 1);
for k = 1 : numLeftVecs
  % read leftVecs and RHSs
  fNameLeftVecs = strcat(modelName, 'leftVecsRed', num2str(k - 1));
  fNameRHS = strcat(modelName, 'redRhs', num2str(k - 1));
  if newEndingFlag
    leftVecs(k, :) = vectorReader([fNameLeftVecs '.fvec']).';
    rhs{k} = vectorReader([fNameRHS '.fvec']);
  else
    leftVecs(k, :) = vectorReader(fNameLeftVecs).';
    rhs{k} = vectorReader(fNameRHS);
  end
end

% read "model.pvar"
fNameModPvar = strcat(modelName, 'model.pvar');
[freqParam, materialParams] = readModParVar(fNameModPvar);

% compute parameter steps of material parameters
for k = 1 : length(materialParams)
  if strcmp(materialParams(k).name, 'MU_RELATIVE')
    materialParams(k).steps = calcMuSteps(paramValInExp(k), materialParams(k).min, materialParams(k).max, ...
      materialParams(k).numPnts);
  elseif strfind(paramNames{k}, 'EPSILON_RELATIVE')
    if linearFlag
      error('EPSILON_RELATIVE does not lead to linear parameter dependence!');
    else
      materialParams(k).steps = calcEpsSteps(paramValInExp(k), materialParams(k).min, materialParams(k).max, ...
        materialParams(k).numPnts);
    end
  else
    error('Unknown material parameter!');
  end
end

% compute parameter steps of frequency parameter
freq = linspace(freqParam.fMin, freqParam.fMax, freqParam.numPnts);
sqrtWaveNumSteps = sqrt(2 * pi * freq / c0);
freqParam.steps = sqrtWaveNumSteps;
scaleRHS = cell(numLeftVecs, 1);
for rhsCnt = 1 : numLeftVecs
  % REVISIT: Only works for TEM modes
  scaleRHS{rhsCnt} = freqParam.steps .^ 2;
end

pos = 1;
currentStepVals = zeros(length(materialParams), 1);
currentParamVals = zeros(length(materialParams), 1);
if isempty(materialParams)
  stepSpace = [];
  paramSpace = [];
else
  [stepSpace paramSpace] = buildStepSpace(materialParams, pos, [], [], currentStepVals, currentParamVals);
end

toc

%% solve model
disp(' ');
disp('Solving model ...');
tic

[rSpace cSpace] = size(stepSpace);

if isempty(materialParams)
  sMat = cell(freqParam.numPnts);
else
  sMat = cell(freqParam.numPnts * cSpace);
end

redRhsScaled = cell(numLeftVecs, 1);
for kStepCnt = 1 : freqParam.numPnts
  fMat = sys{1};
  for sysMatCnt = 2 : size(paramDependenceSysMat, 1)
    if nnz(paramDependenceSysMat(sysMatCnt, 2 : end)) == 0
      % pure frequency dependence
      fMat = fMat + freqParam.steps(kStepCnt) ^ paramDependenceSysMat(sysMatCnt, 1) * sys{sysMatCnt};
    end
  end
  for k = 1 : numLeftVecs
    % rhs is only frequency dependent
    if impedanceFlag
      redRhsScaled{k} = -0.5 * scaleRHS{k}(kStepCnt) * rhs{k};
    else
      redRhsScaled{k} = scaleRHS{k}(kStepCnt) * rhs{k};
    end
  end
  if cSpace
    for pntCnt = 1 : cSpace
      currentMat = fMat;
      for sysMatCnt = 1 : length(sys)
        if paramDependenceSysMat(sysMatCnt, 2 : end) == zeros(1, length(materialParams))
          % do nothing, only pure frequency dependence,
          % which is already considered
        else
          scale = 1;
          % frequency dependence
          scale = scale * (freqParam.steps(kStepCnt)) ^ sysMatRedNames(sysMatCnt, 1);
          % material dependence
          if length(paramDependenceSysMat(sysMatCnt, :)) > 1
            for pCnt = 2 : length(sysMatRedNames(sysMatCnt, :))
              scale = scale * stepSpace(pCnt - 1, pntCnt) ^ sysMatRedNames(sysMatCnt, pCnt);
            end
          end
          % add matrices to build system matrix
          % in current point in parameter space
          currentMat = currentMat + scale * sys{sysMatCnt};
        end
      end
      [L U P] = lu(currentMat);
      for rhsCnt = 1 : length(redRhsScaled)
%         sol = currentMat\redRhsScaled{rhsCnt};    % solve equation system
        sol = U \ (L \ (P * redRhsScaled{rhsCnt}));
        for lVecCnt = 1 : numLeftVecs
          sMat{(kStepCnt - 1) * cSpace + pntCnt}(lVecCnt, rhsCnt) = leftVecs(lVecCnt, :) * sol;
        end
      end
    end
  else  % no material dependence, only pure frequency dependence
    [L U P] = lu(fMat);
    for rhsCnt = 1 : length(redRhsScaled)
%       sol = fMat\redRhsScaled{rhsCnt};      % solve equation system
      sol = U \ (L \ (P * redRhsScaled{rhsCnt}));
      sMat{kStepCnt}(:, rhsCnt) = leftVecs * sol;
    end
  end
end

if impedanceFlag
  % sMat is really an impedance matrix
  % compute scattering matrix from the impedance matrix
  for sMatCnt = 1:length(sMat)
    sMat{sMatCnt} = inv(sMat{sMatCnt} - eye(numLeftVecs)) * (sMat{sMatCnt} + eye(numLeftVecs));
  end
else
  % subtract excitation
  for k = 1:length(sMat)
    [r c] = size(sMat{k});
    sMat{k} = sMat{k} - eye(r, c);
  end
end

toc

%% Save results
disp(' ');
disp('Saving results ...');
tic

fNameSpara = strcat(modelName, 'S_f_', num2str(freqParam.fMin,'%14.14g'), '_', ...
  num2str(freqParam.fMax,'%14.14g'), '_', num2str(freqParam.numPnts,'%14.14g'));
for k = 1:length(paramNames)
  fNameSpara = strcat(fNameSpara, '_', paramNames{k}, '_', num2str(materialParams(k).min,'%14.14g'), '_', ...
    num2str(materialParams(k).max,'%14.14g'), '_', num2str(materialParams(k).numPnts,'%14.14g'));
end
fNameSpara = strcat(fNameSpara, '.txt');

saveSmatrix(sMat, freqParam, materialParams, fNameSpara, numLeftVecs, paramSpace, paramNames);

toc
