close all;
% clear all:
clear;

%% EWP-Test
dim = 10;
blockSize1 = 6;
dimNullSpace = 2;
blockSize2 = dim - blockSize1;
T = randn(blockSize1);
T = T' * T;
Tblock2 = rand(blockSize2);
Tblock2 = Tblock2' * Tblock2;
T((blockSize1 + 1):dim, (blockSize1 + 1):dim) = -1 * Tblock2;
S = randn(dim, dim - dimNullSpace);
S = S * S';
S2 = randn(dim, dim - dimNullSpace);
S2 = S2 * S2';
S = S - S2;
% display(eig(S));  
% display(eig(T));
% R = chol(T);
% display(R);
% display(T);
% display(R' * R);
eigGen = eig(S, T);
% LSLt = inv(R') * S * inv(R);
% display(LSLt);
% eigLSLt = eig(LSLt);
display(eigGen);
% display(eigLSLt);
% display(inv(R') * T * inv(R));
% display(eig(S * R));
Tblock1 = 
R1 = chol(

set(0,'DefaultFigureWindowStyle','docked');

% order = 6;
% fontsize = 12;
% impedanceFlag = true;
% linFreqParamFlag = false;

%% transposed projection
linewidth = 1.5;
modelName = ...
  'C:\work\examples\patch_antenna\patch_antenna_modRed\results\patch_antenna_6e+009_EPSILON_RELATIVE_Box1_(4,0)_EPSILON_RELATIVE_Box2_(2,0)_6_transp\';

% buildRedModelInterpTransp(modelName, order, linFreqParamFlag);
% fNameSpara = modelEvaluation(modelName, impedanceFlag);
fNameSpara = [modelName 'S_f_3000000000_8000000000_151_EPSILON_RELATIVE_Box1_1_5_1_EPSILON_RELATIVE_Box2_3_3_1.txt'];

[parameterNames, numParameterPnts, parameterVals, sMatrices] ...
  = loadSmatrix(fNameSpara);

% plot results
figHandle = figure;
set(figHandle,'color','w');

% one parameter plot
sVal = zeros(numParameterPnts(1),1);
freqs = zeros(numParameterPnts(1),1);
for k = 1:numParameterPnts(1)
  freqs(k) = parameterVals(1,k);
  sVal(k) = sMatrices{k}(1, 1);
end
plot(freqs*1e-9, abs(sVal));
sValTransp = sVal;


%% hermitian projection
modelName = ...
  'C:\work\examples\patch_antenna\patch_antenna_modRed\results\patch_antenna_6e+009_EPSILON_RELATIVE_Box1_(4,0)_EPSILON_RELATIVE_Box2_(2,0)_6_herm\';

% buildRedModelInterpolation(modelName, order, linFreqParamFlag);
% fNameSpara = modelEvaluation(modelName, impedanceFlag);
fNameSpara = [modelName 'S_f_3000000000_8000000000_151_EPSILON_RELATIVE_Box1_1_5_1_EPSILON_RELATIVE_Box2_3_3_1.txt'];

[parameterNames, numParameterPnts, parameterVals, sMatrices] ...
  = loadSmatrix(fNameSpara);

% plot results
figHandle = figure;
set(figHandle,'color','w');

% one parameter plot
sVal = zeros(numParameterPnts(1),1);
freqs = zeros(numParameterPnts(1),1);
for k = 1:numParameterPnts(1)
  freqs(k) = parameterVals(1,k);
  sVal(k) = sMatrices{k}(1, 1);
end
plot(freqs*1e-9, abs(sVal));
sValHermit = sVal;


%% Two-sided projection
order = 6;
fontsize = 12;
modelName = ...
  'C:\work\examples\patch_antenna\patch_antenna_modRed\results\patch_antenna_6e+009_EPSILON_RELATIVE_Box1_(4,0)_EPSILON_RELATIVE_Box2_(2,0)_6_twoSided\';

impedanceFlag = true;
linFreqParamFlag = false;

% buildRedModelInterpTwoSided(modelName, order, linFreqParamFlag);
% fNameSpara = modelEvaluation(modelName, impedanceFlag);
fNameSpara = [modelName 'S_f_3000000000_8000000000_151_EPSILON_RELATIVE_Box1_1_5_1_EPSILON_RELATIVE_Box2_3_3_1.txt'];

[parameterNames, numParameterPnts, parameterVals, sMatrices] ...
  = loadSmatrix(fNameSpara);

% plot results
figHandle = figure;
set(figHandle,'color','w');

% one parameter plot
sVal = zeros(numParameterPnts(1),1);
freqs = zeros(numParameterPnts(1),1);
for k = 1:numParameterPnts(1)
  freqs(k) = parameterVals(1,k);
  sVal(k) = sMatrices{k}(1, 1);
end
plot(freqs*1e-9, abs(sVal));
sValTwoSided = sVal;


%% Compare accuracy
fNameWsolver = 'C:\work\examples\patch_antenna\patch_antenna_wSolver\sParam_e1_1_e2_3.txt';
[fr sMatrices] = readSparamWaveSolver(fNameWsolver);
s11vector = reshape(sMatrices(1,1,:), [length(fr) 1]);
% plot(fr*1e-9, abs(s11vector),'dr', 'LineWidth', linewidth);
% legend('Old 8', 'Old 10', 'New 8', 'Full FE');

% error plot
sValTranspShort = zeros(length(fr), 1);
sValHermitShort = zeros(length(fr), 1);
sValTwoSidedShort = zeros(length(fr), 1);
for fCnt = 1:length(fr)
  sValTranspShort(fCnt) = sValTransp(logical(freqs == fr(fCnt)));
  sValHermitShort(fCnt) = sValHermit(logical(freqs == fr(fCnt)));
  sValTwoSidedShort(fCnt) = sValTwoSided(logical(freqs == fr(fCnt)));
end
figHandle = figure;
set(figHandle, 'color', 'w');
semilogy(fr * 1e-9, abs(sValTranspShort - s11vector), 'LineWidth', linewidth);
grid;
hold;
semilogy(fr * 1e-9, abs(sValHermitShort - s11vector), 'g', 'LineWidth', linewidth);
semilogy(fr * 1e-9, abs(sValTwoSidedShort - s11vector), 'r--', 'LineWidth', linewidth);
legend('Transposed', 'Hermitian', 'Two-Sided');

%%
sys0 = readMatFull('C:\work\examples\patch_antenna\patch_antenna_modRed\results\patch_antenna_6e+009_EPSILON_RELATIVE_Box1_(4,0)_EPSILON_RELATIVE_Box2_(2,0)_6_twoSided\sysMatRed_0_0_0');
% sys0 = readMatFull('C:\work\examples\coax\coax2\results\coax2_3e+009_MU_RELATIVE_74_(4,0)_10_stable_new\sysMatRed_0_0');
status = fclose('all');

