function eigVals = readResultsEigenModeSolver2D( filename ) 
% This function reads the propagation constants
% of the EM_EigenModeSolver2D solution file 

fid = fopen(filename, 'r');   
fileString = fscanf(fid, '%c'); % string containing the whole file
spacePos = find(fileString == ' ');
frequencyPos = strfind(fileString, 'Frequency');
numIterPos = strfind(fileString, 'Number_of_iterations');
for k = 1:length(frequencyPos)
  % Fill the eigVals
  % Read frequency
  freqNumberString = fileString(frequencyPos(k):numIterPos(k));
  spacePos = strfind(freqNumberString, ' ');
  eigVals{k}.freq = str2num(freqNumberString(spacePos(1):spacePos(end)));
  % Read eigenvalues
  % determine number of eigenvalues
  if k == length(frequencyPos)
    solutionString = fileString(frequencyPos(k):end);
  else
    solutionString = fileString(frequencyPos(k):frequencyPos(k+1)-1);
  end
  propagationPos = strfind(solutionString, 'Propagation');
  residualPos = strfind(solutionString, 'Residual');
  numEigVals = length(propagationPos);
  eigVals{k}.values = zeros(numEigVals, 1);
  for m = 1 :numEigVals
    tmpStr = solutionString(propagationPos(m):residualPos(m));
    bracketPosLeft = strfind(tmpStr, '(');
    bracketPosRight = strfind(tmpStr, ')');
    eigValString = tmpStr(bracketPosLeft+1:bracketPosRight-1)
    commaPos = strfind(eigValString, ',');
    eigVals{k}( = str2num(eigValsString(1:commaPos-1)) + ...
      j * str2num(eigValsString(commaPos+1:end));
  end
    
end
  
% % find the number of strings in one line of the file 
% numStrInLine = length(find(fileString(solPos(1):solPos(2)) == ' '));
% freqs = zeros(length(spacePos)/numStrInLine,1);
% % read first frequency
% freqs(1) = str2num(fileString(1:spacePos(1)));
% for k=2:length(spacePos)
%   if mod(k,numStrInLine) == 1  % Frequency
%     %freqs(ceil(k/7)) = str2num(fileString(spacePos(k-1):spacePos(k)));
%     freqs(ceil(k/numStrInLine)) = str2num(fileString(spacePos(k-1):spacePos(k)));
%   end
% end
% % determine dimension of S-matrix
% dimSmatrix = length(find(freqs==freqs(1)));
% % read S-Matrix and write it in multidimensional array
% numFreqs = length(freqs)/dimSmatrix;  % number of different frequencies
% fPur = freqs(1:dimSmatrix:end);
% % use cell array to store the S-matrices
% sMatrices = cell(numFreqs);
% % Fill the S-matrices
% for fCnt = 1:numFreqs
%   for rCnt = 1:dimSmatrix
%     for cCnt = 1:dimSmatrix
%       strNum = (dimSmatrix*(fCnt-1)+(rCnt-1))*numStrInLine+5+(cCnt-1)*2;
%       cmplxStr = fileString((spacePos(strNum-1)+1):(spacePos(strNum)-1));
%       commaPos = find(cmplxStr == ',');
%       sMatrices{fCnt}(rCnt,cCnt) = str2num(cmplxStr(2:(commaPos-1))) + ...
%         j*str2num(cmplxStr((commaPos+1):(length(cmplxStr)-1)));
%     end
%   end
% end
fclose(fid);
