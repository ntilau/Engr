function romDirName = buildRedModelSquareFreqDepOnlyVS(nameUnredModel, order, expansionPoint)


%% load unreduced model
tic
disp(' ')
disp('Loading unreduced model...');

data = load(strcat(nameUnredModel, 'model'), 'model');
model = data.model;
clear data;

toc


%% Building model in specified expansion point
tic
disp(' ')
disp('Building model in specified expansion point...');

modelInExpPnt.sysMat{1} = model.sysMat{1};
posSquareFreqCoeff = findRowInMat([2 0 0], model.coeffSequence);
modelInExpPnt.sysMat{1} = modelInExpPnt.sysMat{1} + expansionPoint(1) ^ 2 * model.sysMat{posSquareFreqCoeff};
modelInExpPnt.sysMat{2} = model.sysMat{posSquareFreqCoeff};
modelInExpPnt.rhs{1} = model.rhs{1};
modelInExpPnt.rhs{1} = modelInExpPnt.rhs{1} + expansionPoint(1) ^ 2 * model.rhs{posSquareFreqCoeff};
modelInExpPnt.rhs{2} = model.rhs{posSquareFreqCoeff};

modelInExpPnt.coeffSequence = [0 1]';

numParams = 1;

toc


%% Build reduced order model
tic
disp(' ')
disp('Building reduced order model...');

% factorization of system matrix in expansion point
[fact.L fact.U fact.P fact.Q] = lu(modelInExpPnt.sysMat{1});

Q = computeProjectionSpaceVS(modelInExpPnt, fact, numParams, order);

% interpolPnts = calcInterpolPnts(numParams, order);
% 
% % compute dimension of projection space
% dimProjSpace = 0;
% for orderCnt = 0 : order
%   dimProjSpace = dimProjSpace + nchoosek(orderCnt + numParams - 1, orderCnt);
% end
% 
% % factorization of system matrix in expansion point
% [fact.L fact.U fact.P fact.Q] = lu(modelInExpPnt.sysMat{1});
% % load fact;
% 
% K = zeros(size(modelInExpPnt.sysMat{1}, 1), dimProjSpace);
% 
% % compute projection space
% currentPos = 1;
% if numParams == 1
%   % test if system has only parameter dependence of order 2
%   if length(modelInExpPnt.sysMat) == 3 && length(modelInExpPnt.rhs) == 3 && ...
%       ~nnz(model.modelInExpPnt{2}) && ~nnz(modelInExpPnt.rhs{2})
%     % remove linear parameter dependence
%     oneParamModelDel.sysMat{1} = modelInExpPnt.sysMat{1};
%     oneParamModelDel.sysMat{2} = modelInExpPnt.sysMat{3};
%     oneParamModelDel.rhs{1} = modelInExpPnt.rhs{1};
%     oneParamModelDel.rhs{2} = modelInExpPnt.rhs{3};
%     Q = wcaweVS(fact, oneParamModelDel, order);
%   else
%     Q = wcaweVS(fact, modelInExpPnt, order);
%   end
%   K = Q;
% else
%   % several parameters
%   normNewDirection = zeros(1, dimProjSpace);
%   for orderCnt = 1 : length(interpolPnts)
%     for pntCnt = 1 : size(interpolPnts{orderCnt}, 1);
%       oneParamModel = createOneParamModelVS(modelInExpPnt, permutMat, interpolPnts{orderCnt}(pntCnt, :));
%       currentPos = currentPos + 1;
%       Q = wcaweVS(fact, oneParamModel, rhs, order);
%       if ~nnz(K)
%         K(:, currentPos : (currentPos + size(Q, 2) - 1)) = Q;
%         currentPos = currentPos + size(Q, 2);
%       else
%         for colCnt = 1 : size(Q, 2)
%           if colCnt >= orderCnt
%             % modified Gram Schmidt
%             for kColCnt = 1:size(K, 2)
%               proj = K(:, kColCnt)' * Q(:, colCnt);
%               Q(:, colCnt) = Q(:, colCnt) - proj * K(:, kColCnt);
%             end
%             normNewDirection(currentPos) = norm(Q(:, colCnt));
%             K(:, currentPos) = Q(:, colCnt) / norm(Q(:, colCnt));
%             currentPos = currentPos + 1;
%           end
%         end
%       end
%     end
%   end
% end

clear fact;

redModel = projectModelVs(model, Q);

toc


%% Save reduced model
tic
disp(' ')
disp('Saving reduced order model...');

romDirName = strcat(nameUnredModel, 'pureSquareFrequency_rom_', num2str(order), '\');
system(['mkdir ' romDirName]);

model = redModel;
save([romDirName 'model'], 'model');

copyfile([nameUnredModel 'params.txt'], [romDirName 'params.txt']);
copyfile([nameUnredModel 'rhsParamDependence.txt'], [romDirName 'rhsParamDependence.txt']);
copyfile([nameUnredModel 'sysMatParamDependence.txt'], [romDirName 'sysMatParamDependence.txt']);
copyfile([nameUnredModel 'outputFunctionalParamDependence.txt'], [romDirName 'outputFunctionalParamDependence.txt']);

model.dummy = 1;

toc
