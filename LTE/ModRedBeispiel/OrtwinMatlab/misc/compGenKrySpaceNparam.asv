function X = compGenKrySpaceNparam(sysMat, fact, startVec, order)

numParam = length(sysMat);

permutMat=[];
for k=0:order
  permutMat = rec(numParam, k, permutMat, 0, 1);
end

f_m_p = 1;
for k=1:(order)
  f_m_p = f_m_p + factorial(k+numParam-1)/factorial(k)/factorial(numParam-1);
end
f_m_p

[r c] = size(permutMat);

[rDim cDim] = size(sysMat{1});
if rDim ~= cDim
  error('Matrix should be
dim = rDim;
X = zeros(dim, r);            % orthonormal vectors

for k = 1:numParam
  sysMatXortho{k} = zeros(dim,r);  % components not yet in krylov space
  sysMatXproj{k} = zeros(r,r);     % projections of SysMat*X on krylov space
end

% [i,j] = component of product i in direction of x_j
F = zeros(r,r);

% initialization
normStartVec = norm(startVec);
X(:,1) = startVec/normStartVec;
F(1,1) = normStartVec;
for p = 1:numParam
  %AX = sysMat{p}*X(:,1);
  AX = applyMultOp(sysMat{p},fact,X(:,1));
  proj = X(:,1)'*AX;
  sysMatXproj{p}(1,1) = proj;
  sysMatXortho{p}(:,1) = AX-proj*X(:,1);
end

for n=2:r
  numArr = findBuildingBlocks(permutMat, permutMat(n,:));
  newOrthoVec = zeros(dim,1);
  for k=1:length(numArr)
    % find appropriate sysMatrix to build sum
    numSysMat = find((permutMat(n,:)==permutMat(numArr(k),:))==0);
    for m=1:numArr(k)
      F(1:n,n) = F(1:n,n) + F(m, numArr(k))*sysMatXproj{numSysMat}(1:n,m);
      newOrthoVec = newOrthoVec + F(m, numArr(k))*...
        sysMatXortho{numSysMat}(1:dim,m);
    end
  end
  F(n,n) = norm(newOrthoVec);
  X(:,n) = newOrthoVec/norm(newOrthoVec);
  % build sysMat*X(:,n), calculate projections on existing krylov
  % vectors and orthogonalize against them
  for paramCnt=1:numParam
    sysMatX = applyMultOp(sysMat{paramCnt},fact,X(:,n));
    projVec = X'*sysMatX; 
    sysMatXproj{paramCnt}(:,n) = projVec;
    sysMatXortho{paramCnt}(:,n) = sysMatX-X*projVec;
  end
  % orthogonalize existing sysMatXortho against new orthonormal 
  % krylov vector
  for paramCnt = 1:numParam
    proj = X(:,n)'*sysMatXortho{paramCnt}(:,1:(n-1));
    sysMatXproj{paramCnt}(n,1:(n-1)) = proj;
    sysMatXortho{paramCnt}(:,1:(n-1)) = ...
      sysMatXortho{paramCnt}(:,1:(n-1))-X(:,n)*proj;
  end
end

