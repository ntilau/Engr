function Z = getSol(x, y, faceId, project, phi, pOrder)

% global coordinates of triangle
edgeId1 = project.topo.face(faceId,1) ;
%edgeId2 = project.topo.face(faceId,2) ;
edgeId3 = project.topo.face(faceId,3) ;

nodeId1 = project.topo.edge(edgeId3, 1) ;
nodeId2 = project.topo.edge(edgeId3, 2) ; 
nodeId3 = project.topo.edge(edgeId1, 2) ; 
    
x1 = project.topo.node(nodeId1, 1) ; 
y1 = project.topo.node(nodeId1, 2) ;
x2 = project.topo.node(nodeId2, 1) ; 
y2 = project.topo.node(nodeId2, 2) ;
x3 = project.topo.node(nodeId3, 1) ; 
y3 = project.topo.node(nodeId3, 2) ;

% calculate shape functions
N1 = (y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3);
N2 = -(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3);
N3 = (-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3);

c  = [phi(nodeId1) phi(nodeId2) phi(nodeId3)] ; 

Z = c(1)*N1 + c(2)*N2 + c(3)*N3 ;

if pOrder > 1

    N4 = (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
    N5 = ((-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
    N6 = (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));

    c(end+1:end+3) = [phi(project.nodeDim + project.topo.face(faceId,:))] ;
    
    Z = Z + c(4)*N4 + c(5)*N5 + c(6)*N6 ;
    
    if pOrder > 2
        
        N7 = (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) - (-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
        N8 = ((-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) - (-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
        N9 = (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) + (-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
        N10 = (-(-y3 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) / (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
        
        c(end+1:end+3) = [phi(project.nodeDim + project.edgeDim + project.topo.face(faceId,:))] ;
        c(end+1:end+1) = [phi(project.nodeDim + 2*project.edgeDim + faceId)] ;
        
        Z = Z + c(7)*N7 + c(8)*N8 + c(9)*N9 + c(10)*N10 ;
        
        if pOrder > 3
        
            N11 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (-3 .* (-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - 3 .* (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + 3 .* (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);
            N12 = ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (3 .* (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + 3 .* (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 3 .* (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);
            N13 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (3 .* (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + 3 .* (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 3 .* (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);
            N14 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) - (-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));
            N15 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) - (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3));

            c(end+1:end+3) = [phi(project.nodeDim + 2*project.edgeDim + project.faceDim + project.topo.face(faceId,:))] ;
            c(end+1:end+1) = [phi(project.nodeDim + 3*project.edgeDim + project.faceDim + faceId)] ;
            c(end+1:end+1) = [phi(project.nodeDim + 3*project.edgeDim + 2*project.faceDim + faceId)] ;
            
            Z = Z + c(11)*N11 + c(12)*N12 + c(13)*N13 + c(14)*N14 + c(15)*N15 ;
            
            if pOrder > 4
            
                N16 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3 - 6 .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + (-6 .* (-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - 6 .* (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + 6 .* (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3);
                N17 = ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3 - 6 .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + (6 .* (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + 6 .* (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 6 .* (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3);
                N18 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3 - 6 .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + (6 .* (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + 6 .* (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 6 .* (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 3);
                N19 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (-3 .* (-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - 3 .* (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + 3 .* (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);
                N20 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (3 .* (-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - 3 .* (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 3 .* (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);
                N21 = (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* ((-y2 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (-x2 + x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x1 .* y2 + y1 .* x2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (((y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2 - (3 .* (y2 - y3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x + 3 .* (-x2 + x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y - 3 .* (-x2 .* y3 + x3 .* y2) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .* (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) + (-(-y3 + y1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* x - (x3 - x1) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3) .* y + (-x1 .* y3 + y1 .* x3) ./ (x2 .* y3 - x3 .* y2 - y1 .* x2 + y1 .* x3 + x1 .* y2 - x1 .* y3)) .^ 2);

                c(end+1:end+3) = [phi(project.nodeDim + 3*project.edgeDim + 3*project.faceDim + project.topo.face(faceId,:))] ;
                c(end+1:end+1) = [phi(project.nodeDim + 4*project.edgeDim + 3*project.faceDim + faceId)] ;
                c(end+1:end+1) = [phi(project.nodeDim + 4*project.edgeDim + 4*project.faceDim + faceId)] ;
                c(end+1:end+1) = [phi(project.nodeDim + 4*project.edgeDim + 5*project.faceDim + faceId)] ;
                
                Z = Z + c(16)*N16 + c(17)*N17 + c(18)*N18 + c(19)*N19 + c(20)*N20 + c(21)*N21 ;
                
            end
        end
    end
end